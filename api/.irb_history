ENV["MYSQL_PASSWORD"]
MYSQL_PASSWORD
exit
ENV["MYSQL_PASSWORD"]
exit
Time.zone.name
Time.current
I18n.locale
exit
Hirb::View.enabled?
puts Hirb::Helpers::Table.render [[1,2], [2,3]]
exit
User.create!(name:'admin', email:'www@www.www',  password:'password', admin: true)
User.first
exit
users = User.all
Users.all
User.all
User.destroy_all
User.all
User.destroy_all!
User.first
exit
curl -X GET localhost:3000/api/v1/auth/sign_up
curl -X GET localhost:3000/api/v1/articles
exit
Article.categories
Article.categories.1
Article.categories.gas
Article.categories
Article.categories.maps
Article.categories.class
Article._where_categories(:tshnami)
Article.where_categories(:tshnami)
Article.where_category()
where_category(:tsunami)
Article.where_category(:tsunami)
Article.where_category(:tsunami, :volcano)
exit
Article.title
Article.category
Article.titles
Article.article_favorites
Article.categories
article = Article.create!(title: 'wow', content: 'wow', user_id: 1, category: 32)
Article.create!(title: 'wow', content: 'wow', user_id: 1, category: tsunami)
Article.create!(title: 'wow', content: 'wow', user_id: 1, category: 32)
exit
Article.create!(title: 'wow', content: 'wow', user_id: 1, category: 32)
Article.create!(title: 'wow', content: 'wow', user_id: 1, category: tsunami)
Article.create!(title: 'wow', content: 'wow', user_id: 1, category: :tsunami)
Article.categories
Article.create!(title: 'wow', content: 'wow', user_id: 1, category: :tsunami, :emergency)
Article.create!(title: 'wow', content: 'wow', user_id: 1, category: [:tsunami, :jalert])
exit
Article.category.maps
Article.categories.maps
exit
Infomation.last.article_id
Infomation.last
Infomation.first
Infomation.first.id
exit
Article.create(title: 'wow', content: 'wow', category: 'gas')
Article.create!(title: 'wow', content: 'wow', category: 'gas', user_id: 1)
article = Article.create!(title: 'wow', content: 'wow', category: 'gas', user_id: 1)
article = Article.create!(title: 'wow', content: 'wow', category: 'gas', user_id:\
1)
exit
article = Article.create!(title: 'wow', content: 'wow', category: 'gas', user_id:\
1)
user = User.find(1)
User.first
user = User.first
exit
RequiredPoint.all
PointRecord.all
exit
User.point_ranking
user = User.first
User.first
user = User.first
Article.create!(user_id: 1, title: 'wow', content: 'wow')
Article.create!(user_id: 1, title: 'wow', content: 'wow', category: 'gas')
Point_record.first
PointRecord.first
User.ranking
User.point_ranking
exist
exit
User.point_ranking
exit
article = Article.last
Article.last
Article.first
article = Article.first
Article.first.likers
exit
Article.last.likers_count
likers_count(Article.last)
Article.last.likes.count
Article.last.likers.count
Article.last.likers
Article.first.likers.count
likers_count(Article.first)
Article.first.likers_count
Article.likers_count(Article.first)
exit
Article.likers_count(Article.first)
exit
Article.first.likers_count
exit
likers_count(Article.first)
Article.likers_count(Article.first)
Article.first.likers_count
Article.first.likers_count(Article.first)
Article.first.likers.count
exit
Prefecture.count
City.count
Prefecture.all.each { |pref| puts pref.name }
Prefecture.find_by(name: '東京都').cities.each { |city| puts city.name }
exit
User.first
exit
Article.last.image_url.large
Article.last.thumbnail_url
Article.last
Article.last.thumbnail
exit
User.last
User.first
User.first.image
User.first.image
User.first
exit
Genre.create!(id: 1, name: '電気・ガス', image: File.open("#{Rails.root}/public/images/genre/noimage.jpeg"))
Genre.destroy_all
exit
Genre.create!(id: 1, name: '電気・ガス', image: File.open("#{Rails.root}/public/images/genre/noimage.jpeg"))
Genre.first.image
Genre.first
Genre.first.name
Genre.first.image
exit
Genre.destroy_all
Genre.all
exit
Genre.all
exit
Genre.all
exit
Genre.all
exit
Article.last.id
Article.last.genres
Genre.first.id
Genre.first.articles
exit
Article.ranking
Article.all.ranking
exit
Article.ranking
Article.ranking
Article.all
exit
Article.ranking
Article.ranking.all
Article.all.ranking
exit
exit
Article.ranking
exit
Article.ranking
exit
Article.ranking
exit
Article.ranking
exit
Article.ranking
exit
Article.ranking
exit
Article.ranking
exit
ArticleFavorite.all
exit
Article.likes
exit
Article.likes
Article.last.likes
Article.article_favorites
Article.last.article_favorites
User.last.articles
exit
User.favorited_articles
User.last.favorited_articles
User.last.articles
User.last.articles + favorited_articles
User.last.articles
User.last.favorited_articles
User.last.favorited_articles
exit
User.last.often_user_articles
User.last.often_use_articles
exit
User.last.often_use.articles
User.last.often_use_articles
exit
User.last.often_use_articles
User.first.often_use_articles
exit
User.fist.often_use_articles
User.first.often_use_articles
exit
genre = Genre.last
Article.last.Genre.last
Article.all.genres
Article.last.genres
Article.last.genres.last
exit
User.last.favorited_articles.joins(:articles_genre_relations).where("genre_id = #{Genre.last.id}")
User.last.favorited_articles.joins(:article_genre_relations).where("genre_id = #{Genre.last.id}")
User.first.favorited_articles.joins(:article_genre_relations).where("genre_id = #{Genre.last.id}")
User.first.favorited_articles
User.last.favorited_articles
exit
RequiredPoint
RequiredPoint.find(level: User.last.level)
RequiredPoint.find_by(level: User.last.level)
exit
RequiredPoint.all
exit
RwquiredPoint.all
RequiredPoint.all
edit
exit
RequiredPoint.all
exit
RequiredPoint.all
exit
RequiredPoint.all
exit
RwquiredPoint.all
RequiredPoint.all
exit
RequiredPoint.all
exit
RequiredPoint.all
exit
User.all
RequiredPoint.all
exit
User.last.articles.build(article_params)
exit
ENV['GUEST_USER_PASSWORD']
exit
 
User.colums
User.columns
User.column_names
exit
username = 'guest' + SecureRandom.alphanumeric(5)
User.first.destroy_schedule_at
User.create(username: 'username', name: 'name', email: 't@t.tt', password: 'password',confirmed_at: Time.current, destroy_schedule_at: Time.current)
exit
User.first
User.first.admin = true
User.first.update(admin: true)
User.first
exit
User.first
User.first.admin = true
User.first.update(admin: true)
User.first.admin
exit
Infomation.all
exit
exit
Task.last.complete_users
Task.second.complete_users
exit
User.first.exists?
User.first
User.first.all？
User.first.all?
exit
User.first.attributes.all?
User.first.attributes
User.first.attributes.values
User.first.attributes.values.all?
exit
User.first.sns_tasks.maps
User.first.sns_tasks
User.first.sns_tasks.pairs
User.first.sns_tasks.set(:kantei_saigai)
User.first.sns_tasks
User.first.sns_tasks
User.first.sns_tasks.set(:kantei_saigai).save
User.first.sns_tasks.set?(:kantei_saigai)
exit
User.first.sns_tasks.map
User.first.sns_tasks.maps
User.first.sns_tasks.map!
User.first.sns_tasks.pair
User.first.sns_tasks.pairs
User.first.sns_tasks.to_a
User.first.sns_tasks
User.first.sns_tasks.to_human
User.sns_tasks.pairs
User.sns_tasks.maps
User.sns_tasks.humans
exit
User.first.sns_tasks(:kantei_saigai)
User.first.sns_tasks.set(:kantei_saigai)
User.first
User.first.sns_tasks.set("首相官邸(災害・危機管理情報)")
User.first.sns_tasks.set('kantei_saigai')
exit
User.first.sns_tasks
User.first.sns_tasks.unset(:kantei_saigai)
User.first.sns_tasks
User.first.sns_tasks.unset('kantei_saigai')
User.first.sns_tasks.unset?(:kantei_saigai)
User.first.sns_tasks.set?('kantei_saigai')
User.first.sns_tasks.set?("kantei_saigai")
User.first.sns_tasks.unset("kantei_saigai")
User.first.sns_tasks.set('kantei_saigai')
User.first.sns_tasks
User.first.sns_tasks.unset('fdma_japan')
User.first.sns_tasks
 User.first.sns_tasks.set('kantei_saigai')
User.first.sns_tasks.unset('kantei_saigai')
User.first.sns_tasks
User.first.sns_tasks.unset(:fdma_japan)
User.first.sns_tasks
User.first.sns_tasks
User.first.sns_tasks.set(:kantei_saigai)
User.first.sns_tasks
User.first.sns_tasks.set('kantei_saigai')
User.first.snt_tasks
User.first.sns_tasks
User.first.sns_tasks.unset('fdma_japan')
User.first.sns_tasks.set('kantei_saigai')
User.first.sns_tasks.unset(:fdma_japan)
User.first.sns_tasks.unset(:fdma_japsn)
User.first.sns_tasks
User.first.sns_tasks.unset('kantei_saigai')
User.first.sns_tasks.unset("kantei_saigai")
User.first.sns_tasks.unset(:kantei_saigai)
User.first.sns_tasks.set(:cao_bousai)
User.first.sns_tasks
User.first.sns_tasks.set('cao_bousai')
User.first.sns_tasks
User.sns_tasks.unset(:kantei_saigai)
User.first.sns_tasks.unset(:kantei_saigai)
User.first.sns_tasks.unset('kantei_saigai')
User.first.sns_tasks.set('cao_bousai')
User.first.sns_tasks.raw
User.first.sns_tasks.set('cao_bousai')
User.sns_tasks
User.sns_tasks.maps
User.sns_tasks.maps('kantei_saigai')
User.sns_tasks.maps.find(key: 'kantei_saigai')
User.sns_tasks.maps.find('kantei_saigai')
User.sns_tasks.maps
User.sns_tasks.maps.first
User.sns_tasks.maps
User.sns_tasks.maps.find(1)
User.sns_tasks.maps.to_a
User.sns_tasks.maps.to_a.find('kantei_saigai')
User.sns_tasks.maps.find(:kantei_saigai)
User.first.sns_tasks.find('kantei_saigai')
User.first.update(sns_tasks: 0)
User.first.update(sns_tasks: 0)
User.first.update(sns_tasks: 0)
User.first.update(sns_tasks: 0)
User.first.update(sns_tasks: 0)
User.first.update(sns_tasks: 0)
User.sns_tasks.maps
User.sns_tasks.to_value(:kantei_saigai)
User.sns_tasks.to_value(user, 1)
User.sns_tasks.to_i(1)
User.sns_tasks.to_value(:kantei_saigai, 1)
User.sns_tasks.to_value('kantei_saigai', 2)
User.sns_taks.to_value(User, 1)
User.sns_tasks.to_value(User, 1)
User.sns_tasks.to_value(a, 3)
User.sns_tasks.to_value(User, 2)
User.sns_tasks.to_i('kantei_saigai')
User.first.sns_tasks.to_value(User, 18)
User.first.sns_tasks.raw
User.first.sns_tasks.raw = 19
User.first.sns_tasks.set(18)
User.first.sns_tasks.unset('kantei_saigai')
User.first.sns_tasks.raw
User.first.sns_tasks.set('cao_bousai')
User.first.sns_tasks.set!('cao_bousai')
User.first.sns_tasks.unset!('cao_bousai')
User.first.sns_tasks
User.first.sns_tasks.raw
User.first.sns_tasks.set('cao_bousai')
User.first.sns_tasks.unset('cao_bousai')
User.first.sns_tasks.set!('cao_bousai')
User.first.sns_tasks.unset!('cao_bousai')
exit
User.first.user_task
exit
User.first.task_profile
User.first.task_profile.sns_tasks
TaskProfile.sns_tasks
exit
TaskProfile.sns_tasks
exit
TaskProfile.all
exit
TaskProfile.house_tasks.pairs
exit
TaskProfile.exsts?
TaskProfile.exists?
FamiyRule.exists?(user_id: User.first.id)
FamilyRule.exists?(user_id: User.first.id)
exit
User.first.families
User.first.families.stocks
User.first.families.stock
Family.first.stock
Family.create!(user_id: 1, sex: 1, age: 1)
Family.first.stock
exit
Stock.first
exit
User.first.families
exit
Stock.find_by(age: 2, sex: 2)
exit
City.first
City.first.code
exit
HazardMap.last
exit
HazardMap.first
HazardMap.first.flood
exit
City.class
City.column
City.columns
City.columns.name
City.columns.first
City.columns.city_code
exit
City.first.hazard_map
HazardMap.first.city
exit
City.first.hazard_map
exit
City.first
City.columns
exit
City.first.hazard_map
exit
City.first
City.first.hazard_map
HazardMap.first
HazardMap.all
exit
City.first
HazardMap.first
City.first.hazard_map
exit
City.first.hazard_map
HazardMap.first.city
exit
HazardMap.first.city
City.firts.hazard_map
City.first.hazard_map
exit
HazardMap.all
exit
User.first.is_admin?
User.first.update(is_admin: 1)
User.fist.is_admin?
User.first.is_admin?
exit
City.find(1100)
exit
City.find(01100)
City.find(1100)
City.find('01100')
exit
City.all
exit
City.find("01100"\
)
exit
City.find('01100')
City.find(01100)
exit
City.find('1100')
City.find('01100')
City.find("01100")
exit
Shelter.all
Shelter.first.latitude
Shelter.first.longitude
Shelter.first.longitude.round
exit
Shelter.delete_all
Shelter.all
exit
Shelter.count
exit
RequiredPoint.all
exit
User.first.task_profile
User.first.task_profile.hazard_map_confirmed?
exit
User.first.task_profile.update!(hazard_map_confirmed_at: nil)
exit
User.first.task_profile.update!(hazard_map_confirmed_at: nil)
exit
User.first
User.first.update!(city_id: nil)
ser.first.update!(prefecture_id: nil)
User.first.update!(prefecture_id: nil)
User.first
exit
User.first.update!(city_id: nil, prefecture_id: nil)
exit
User.first.update!(hazard_map_comfirmed_at: nil)
User.first.update!(hazard_map_confirmed_at: nil)
User.first.task_profile.update!(hazard_map_confirmed_at: nil)
exit
